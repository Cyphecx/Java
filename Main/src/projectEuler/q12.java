package projectEuler;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;

//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?
//		
public class q12{
	public static void main(String[] args){
		long startTime = System.currentTimeMillis();
		int divs = 0;
		int n = 8;
		HashMap<Long,Integer> map = new HashMap<Long, Integer>();
		ArrayList<Long> list = null;
		while(divs < 500){
			n++;
			divs = 1;
			map.clear();
			list = utils.primeFactor.factor((n * (n + 1))/2);
			for(int i = 0; i < list.size(); i++){
				if(map.get(list.get(i)) != null){
					map.put((Long) list.get(i), map.get(list.get(i))+1);
				}
				else{
					map.put((Long) list.get(i), 1);
				}
			}
			Set<Long> arr = map.keySet();
			for(Long i : arr){
				divs *= (map.get(i)+1);
			}
			list.clear();
		}
		long endTime = System.currentTimeMillis();
		System.out.println("It took " + ((double)(endTime - startTime)/1000) + " seconds to find the answer: " + ((n * (n + 1))/2));
	}

}
